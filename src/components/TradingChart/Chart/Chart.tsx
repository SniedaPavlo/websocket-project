import React, { useRef, useEffect, useState, useCallback } from "react";
import { PriceData, ChartBlock } from "@/types";
import { BlockGrid } from "../BlockGrid";
import {
  generateBlocksGrid,
  normalizePrice,
  getMinMaxPrice,
} from "../../../libs/utils/chartUtils";
import { useResponsive } from "../../../hooks/useResponsive";
import { useWebSocketPrice } from "../../../hooks/useWebSocketPrice";
import styles from "./Chart.module.scss";

interface ChartProps {
  feed?: string;
  width?: number;
  height?: number;
  className?: string;
}

export const Chart: React.FC<ChartProps> = ({
  feed = "SOL_USD",
  width = 800,
  height = 400,
  className = "",
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);
  const [blocks, setBlocks] = useState<ChartBlock[]>([]);
  const [chartDimensions, setChartDimensions] = useState({
    width: 0,
    height: 0,
  });
  const { blockConfig } = useResponsive();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö WebSocket
  const { priceData, isConnected } = useWebSocketPrice({ feed });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ WebSocket
  const [isLoadingWebSocket, setIsLoadingWebSocket] = useState(false);
  const [filteredPriceData, setFilteredPriceData] = useState<PriceData[]>([]);
  const [webSocketStartTime, setWebSocketStartTime] = useState<number | null>(
    null
  );

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ WebSocket
  const LoadingWebSocket = useCallback(() => {
    if (isConnected && !isLoadingWebSocket && webSocketStartTime === null) {
      console.log("üîÑ Starting WebSocket loading phase...");
      setIsLoadingWebSocket(true);
      setWebSocketStartTime(Date.now());
      setFilteredPriceData([]); // Clear any existing data

      // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
      const timer = setTimeout(() => {
        console.log(
          "‚úÖ WebSocket loading phase completed. Starting to accept data..."
        );
        setIsLoadingWebSocket(false);
      }, 2000);

      return () => clearTimeout(timer);
    }
  }, [isConnected, isLoadingWebSocket, webSocketStartTime]);

  // –ó–∞–ø—É—Å–∫ LoadingWebSocket –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  useEffect(() => {
    LoadingWebSocket();
  }, [LoadingWebSocket]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    if (!isLoadingWebSocket && webSocketStartTime !== null) {
      // –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏—à–µ–¥—à–∏–µ –ø–æ—Å–ª–µ 2-—Å–µ–∫—É–Ω–¥–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      const acceptableData = priceData.filter((data) => {
        // –ï—Å–ª–∏ —É –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å timestamp, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        const dataTime = data.timestamp || Date.now();
        return dataTime > webSocketStartTime + 2000;
      });

      setFilteredPriceData(acceptableData);
      console.log("üìä Filtered price data:", {
        totalData: priceData.length,
        filteredData: acceptableData.length,
        isLoadingWebSocket,
        webSocketStartTime,
      });
    } else {
      // –í–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ä–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–º–∏
      setFilteredPriceData([]);
    }
  }, [priceData, isLoadingWebSocket, webSocketStartTime]);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
  useEffect(() => {
    if (!isConnected) {
      setIsLoadingWebSocket(false);
      setWebSocketStartTime(null);
      setFilteredPriceData([]);
      console.log("üîå WebSocket disconnected. Resetting state...");
    }
  }, [isConnected]);

  // –û—Ç–ª–∞–¥–∫–∞
  useEffect(() => {
    console.log("üìä Chart data:", {
      priceDataLength: priceData.length,
      filteredDataLength: filteredPriceData.length,
      isConnected,
      isLoadingWebSocket,
      webSocketStartTime,
      lastPrice: filteredPriceData[filteredPriceData.length - 1],
    });
  }, [
    priceData,
    filteredPriceData,
    isConnected,
    isLoadingWebSocket,
    webSocketStartTime,
  ]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–æ–≤
  useEffect(() => {
    const newBlocks = generateBlocksGrid(
      blockConfig.blocksPerRow,
      blockConfig.blocksPerColumn
    );
    setBlocks(newBlocks);
  }, [blockConfig.blocksPerRow, blockConfig.blocksPerColumn]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  useEffect(() => {
    const updateDimensions = () => {
      if (containerRef.current) {
        const rect = containerRef.current.getBoundingClientRect();
        const newWidth = rect.width || width;
        const newHeight = rect.height || height;

        if (newWidth > 0 && newHeight > 0) {
          setChartDimensions({ width: newWidth, height: newHeight });
        }
      }
    };

    updateDimensions();

    const resizeObserver = new ResizeObserver(updateDimensions);
    if (containerRef.current) {
      resizeObserver.observe(containerRef.current);
    }

    return () => resizeObserver.disconnect();
  }, [width, height]);

  // –†–∏—Å–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas?.getContext("2d");

    if (
      !canvas ||
      !ctx ||
      chartDimensions.width === 0 ||
      chartDimensions.height === 0
    ) {
      return;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ canvas
    const dpr = window.devicePixelRatio || 1;
    canvas.width = chartDimensions.width * dpr;
    canvas.height = chartDimensions.height * dpr;
    canvas.style.width = `${chartDimensions.width}px`;
    canvas.style.height = `${chartDimensions.height}px`;
    ctx.scale(dpr, dpr);

    // –û—á–∏—Å—Ç–∫–∞ canvas
    ctx.clearRect(0, 0, chartDimensions.width, chartDimensions.height);

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket
    if (isLoadingWebSocket) {
      ctx.fillStyle = "#FFD700";
      ctx.fillRect(10, 10, 120, 50);
      ctx.fillStyle = "#000000";
      ctx.font = "12px Arial";
      ctx.fillText("Loading...", 20, 30);
      ctx.fillText("Please wait 2s", 20, 45);

      // –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      ctx.font = "12px Arial";
      ctx.fillStyle = "#FFD700";
      ctx.fillText("‚óè LOADING", chartDimensions.width - 80, 20);

      return;
    }

    // –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ª–∏–Ω–∏—é —Ü–µ–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (filteredPriceData.length > 1) {
      const { min, max } = getMinMaxPrice(filteredPriceData);
      const padding = (max - min) * 0.1 || 1;
      const minPrice = min - padding;
      const maxPrice = max + padding;

      // –í—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
      const pointSpacing =
        chartDimensions.width / Math.max(100, filteredPriceData.length);
      const startX = 0; // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞

      // –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å –±–æ–ª–µ–µ —á–∞—Å—Ç—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
      const gradient = ctx.createLinearGradient(0, 0, chartDimensions.width, 0);

      gradient.addColorStop(0.0, "#FAE279");
      gradient.addColorStop(0.05, "#FBEBB0");
      gradient.addColorStop(0.1, "#E9BD49");
      gradient.addColorStop(0.15, "#FCE57C");
      gradient.addColorStop(0.2, "#FAE279");
      gradient.addColorStop(0.25, "#FBEBB0");
      gradient.addColorStop(0.3, "#E9BD49");
      gradient.addColorStop(0.35, "#FCE57C");
      gradient.addColorStop(0.4, "#FAE279");
      gradient.addColorStop(0.45, "#FBEBB0");
      gradient.addColorStop(0.5, "#E9BD49");
      gradient.addColorStop(0.55, "#FCE57C");
      gradient.addColorStop(0.6, "#FAE279");
      gradient.addColorStop(0.65, "#FBEBB0");
      gradient.addColorStop(0.7, "#E9BD49");
      gradient.addColorStop(0.75, "#FCE57C");
      gradient.addColorStop(0.8, "#FAE279");
      gradient.addColorStop(0.85, "#FBEBB0");
      gradient.addColorStop(0.9, "#E9BD49");
      gradient.addColorStop(0.95, "#FCE57C");
      gradient.addColorStop(1.0, "#FAE279");

      // –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ª–∏–Ω–∏—é
      ctx.strokeStyle = gradient;
      ctx.lineWidth = 3.3;
      ctx.lineCap = "round";
      ctx.lineJoin = "round";

      ctx.beginPath();

      filteredPriceData.forEach((data, i) => {
        const x = startX + i * pointSpacing;
        const normalizedY = (data.price - minPrice) / (maxPrice - minPrice);
        const y =
          chartDimensions.height -
          normalizedY * chartDimensions.height * 0.8 -
          20;

        if (i === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      });

      ctx.stroke();

      // –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
      const lastData = filteredPriceData[filteredPriceData.length - 1];
      const lastX = startX + (filteredPriceData.length - 1) * pointSpacing;
      const lastNormalizedY =
        (lastData.price - minPrice) / (maxPrice - minPrice);
      const lastY =
        chartDimensions.height -
        lastNormalizedY * chartDimensions.height * 0.8 -
        20;

      ctx.fillStyle = "rgba(252, 229, 124, 0.3)";
      ctx.beginPath();
      ctx.arc(lastX, lastY, 12, 0, 2 * Math.PI);
      ctx.fill();

      ctx.fillStyle = "#FCE57C";
      ctx.beginPath();
      ctx.arc(lastX, lastY, 5, 0, 2 * Math.PI);
      ctx.fill();

      // –¢–µ–∫—Å—Ç —Ü–µ–Ω—ã
      ctx.fillStyle = "#FFFFFF";
      ctx.font = "bold 14px Arial";
      ctx.fillText(`$${lastData.price.toFixed(2)}`, lastX + 10, lastY);
    } else if (isConnected && !isLoadingWebSocket) {
      // –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      ctx.fillStyle = "#FF6B6B";
      ctx.fillRect(10, 10, 140, 50);
      ctx.fillStyle = "#FFFFFF";
      ctx.font = "12px Arial";
      ctx.fillText("Waiting for data...", 20, 30);
      ctx.fillText("Connected & Ready", 20, 45);
    } else {
      // –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      ctx.fillStyle = "#FF0000";
      ctx.fillRect(10, 10, 120, 50);
      ctx.fillStyle = "#FFFFFF";
      ctx.font = "12px Arial";
      ctx.fillText("Not connected", 20, 30);
      ctx.fillText(`Status: ${isConnected}`, 20, 45);
    }

    // –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    ctx.font = "12px Arial";
    if (isLoadingWebSocket) {
      ctx.fillStyle = "#FFD700";
      ctx.fillText("‚óè LOADING", chartDimensions.width - 80, 20);
    } else {
      ctx.fillStyle = isConnected ? "#FCE57C" : "#FF0000";
      const statusText = isConnected ? "‚óè LIVE" : "‚óè OFFLINE";
      ctx.fillText(statusText, chartDimensions.width - 60, 20);
    }
  }, [filteredPriceData, chartDimensions, isConnected, isLoadingWebSocket]);

  const handleBlockClick = useCallback((blockId: string) => {
    setBlocks((prev) =>
      prev.map((block) =>
        block.id === blockId ? { ...block, isActive: !block.isActive } : block
      )
    );
  }, []);

  // –¶–µ–Ω–æ–≤—ã–µ –º–µ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const priceLabels = React.useMemo(() => {
    if (filteredPriceData.length === 0) return [];

    const { min, max } = getMinMaxPrice(filteredPriceData);
    const padding = (max - min) * 0.1 || 1;
    const minPrice = min - padding;
    const maxPrice = max + padding;
    const steps = 5;

    return Array.from({ length: steps + 1 }, (_, i) => {
      const price = maxPrice - (maxPrice - minPrice) * (i / steps);
      return price.toFixed(2);
    });
  }, [filteredPriceData]);

  return (
    <div
      ref={containerRef}
      className={`${styles.chart} ${className}`}
      style={{
        width: width || "100%",
        height: height || "100%",
      }}
    >
      <div className={styles.chartWrapper}>
        <div className={styles.priceLabels}>
          {priceLabels.map((price, i) => (
            <div key={i} className={styles.priceLabel}>
              ${price}
            </div>
          ))}
        </div>

        <div className={styles.chartContent}>
          <BlockGrid
            blocks={blocks}
            onBlockClick={handleBlockClick}
            className={styles.blockGrid}
            blocksPerRow={blockConfig.blocksPerRow}
            blocksPerColumn={blockConfig.blocksPerColumn}
          />
          <canvas ref={canvasRef} className={styles.canvas} />
        </div>
      </div>
    </div>
  );
};
